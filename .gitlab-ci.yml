stages:
  - build
  - test
  - version
  - release
  - deploy

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

# Temel iş tanımı şablonu
.base_job:
  image: gradle:jdk17
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle

# Build aşaması
build:
  extends: .base_job
  stage: build
  script:
    - ./gradlew clean assemble
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .gradle/
      - build/
  artifacts:
    paths:
      - build/libs/*.jar
    expire_in: 1 week

# Test aşaması
test:
  extends: .base_job
  stage: test
  script:
    - ./gradlew test
  dependencies:
    - build

# Sürüm belirleme aşaması - Nyx kullanarak
version:
  extends: .base_job
  stage: version
  script:
    - ./gradlew nyxInfer
    - echo "NYX_VERSION=$(./gradlew -q nyxInfer | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')" >> version.env
  artifacts:
    reports:
      dotenv: version.env
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^r[0-9]+\.[0-9]+\.[0-9]+$/ || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "production"'

# Release aşaması - Nyx kullanarak
release:
  extends: .base_job
  stage: release
  script:
    - git config user.name "${GITLAB_USER_NAME}"
    - git config user.email "${GITLAB_USER_EMAIL}"
    # Nyx ile etiket oluşturma işlemi
    - ./gradlew nyxMark
    # Changelog oluşturma
    - ./gradlew nyxPublish
  dependencies:
    - version
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^r[0-9]+\.[0-9]+\.[0-9]+$/ || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "production"'
  environment:
    name: release
    url: $CI_PROJECT_URL/-/releases

# Dev ortamı dağıtım aşaması
deploy_dev:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Deploying to DEV environment..."
    - echo "Deploying version $NYX_VERSION to DEV environment"
    # Dev ortamına dağıtım komutları burada yer alacak
  dependencies:
    - build
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^feature\/.*$/'
      when: manual
    - if: '$CI_COMMIT_BRANCH == "dev"'

# Test ortamı dağıtım aşaması
deploy_test:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Deploying to TEST environment..."
    - echo "Deploying version $NYX_VERSION to TEST environment"
    # Test ortamına dağıtım komutları burada yer alacak
  dependencies:
    - build
    - release
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^r[0-9]+\.[0-9]+\.[0-9]+$/'
      when: manual
  environment:
    name: test
    url: https://test.example.com

# Prod ortamı dağıtım aşaması
deploy_prod:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Deploying to PRODUCTION environment..."
    - echo "Deploying version $NYX_VERSION to PRODUCTION environment"
    # Prod ortamına dağıtım komutları burada yer alacak
  dependencies:
    - build
    - release
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "production"'
      when: manual
  environment:
    name: production
    url: https://prod.example.com